name: Release Obsidian Plugin
on:
    release:
        types:
            - created
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

            - name: Use Node.js
              uses: actions/setup-node@v1
              with:
                  node-version: '16.x'

            # Get the version number and put it in a variable
            - name: Get Version
              id: version
              run: |
                  echo "::set-output name=tag::$(git describe --abbrev=0)"
            # Build the plugin
            - name: Build
              id: build
              run: |
                  npm install
                  npm run build
            # Package the required files into a zip
            - name: Package Plugin ðŸ“¦
              run: |
                  mkdir ${{ github.event.repository.name }}
                  cp main.js manifest.json styles.css README.md ${{ github.event.repository.name }}
                  zip -r ${{ github.event.repository.name }}.zip ${{ github.event.repository.name }}
            # Package the vault files into a zip
            #   - name: Package Vault ðŸ“¦
            #     run: |
            #       mkdir ${{ github.event.repository.name }}/vault
            #       cp -R docs/. ${{ github.event.repository.name }}/vault
            #       zip -r ${{ github.event.repository.name }}.vault.zip ${{ github.event.repository.name }}/vault
            # Get the release notes from the changelog.
            - name: Get notes
              id: generate_notes
              uses: mckrava/standard-version-release-notes@v1.1.0
              with:
                  tag_name: ${{ github.ref }}
                  tag_name_ref_view: true
                  changelog: CHANGELOG.md

            - name: Get release
              id: get_release
              uses: bruceadams/get-release@v1.3.2
              env:
                GITHUB_TOKEN: ${{ github.token }}
            # Upload the packaged release file
            - name: Upload zip file
              id: upload-zip
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.get_release.outputs.upload_url }}
                  asset_path: ./${{ github.event.repository.name }}.zip
                  asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.tag }}.zip
                  asset_content_type: application/zip

            # Upload the packaged vault file
            #   - name: Upload vault zip file
            #     id: upload-vault-zip
            #     uses: actions/upload-release-asset@v1
            #     env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #     with:
            #       upload_url: ${{ steps.create_release.outputs.upload_url }}
            #       asset_path: ./${{ github.event.repository.name }}.vault.zip
            #       asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.tag }}.vault.zip
            #       asset_content_type: application/zip

            # Upload the main.js
            - name: Upload main.js
              id: upload-main
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.get_release.outputs.upload_url }}
                  asset_path: ./main.js
                  asset_name: main.js
                  asset_content_type: text/javascript

            # Upload the manifest.json
            - name: Upload manifest.json
              id: upload-manifest
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.get_release.outputs.upload_url }}
                  asset_path: ./manifest.json
                  asset_name: manifest.json
                  asset_content_type: application/json

            # Upload the style.css
            - name: Upload styles.css
              id: upload-css
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.get_release.outputs.upload_url }}
                  asset_path: ./styles.css
                  asset_name: styles.css
                  asset_content_type: text/css
